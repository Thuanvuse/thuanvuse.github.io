import requests
import json
import random
import string
import time
import hashlib
import threading
import os
import uuid


def generate_user_agent():
    return random.choice([
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64)...",
        "Mozilla/5.0 (iPhone; CPU iPhone OS 17_2_1...)",
        "Mozilla/5.0 (Linux; Android 14)..."
    ])

def get_captcha(proxies):
    print("üß† ƒêang l·∫•y captcha v√† gi·∫£i m√£...")
    headers = {"user-agent": generate_user_agent(), "accept": "application/json"}
    res = requests.get("https://oklavip26.live/api/accountLogin/captcha", headers=headers, proxies=proxies)
    if res.status_code == 200:
        data = res.json()["data"]
        ocr = requests.post("http://103.77.242.210:8000/ocr", data={"image": data['image']}).json()
        print(f"üîç Captcha: {ocr.get('data')}, UUID: {data['uuid']}")
        return data['uuid'], ocr.get("data")
    print(f"‚ùå L·ªói l·∫•y captcha: {res.status_code}")
    return None, None

def create_proxy(proxy_string):
    ip, port, user, pwd = proxy_string.strip().split(":")
    return {"http": f"http://{user}:{pwd}@{ip}:{port}", "https": f"http://{user}:{pwd}@{ip}:{port}"}

def send_register_phone(phone, proxies, fid):
    url = "https://m.oklavip29.live/api/accountLogin/sendRegisterPhone"
    
    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1",
        "Referer": "https://m.oklavip29.live/registerStep",
        "Accept": "application/json, text/plain, */*",
        "Accept-Language": "vi-VN,vi;q=0.9",
        "f-id": fid,  
        "locale": "vi_vn",
    }
    
    payload = {
        "region": "+84",
        "phone": phone
    }
    
    response = requests.post(url, headers=headers, data=json.dumps(payload), proxies=proxies)
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to send phone number verification. Status code: {response.status_code}")
        return None

def buregister_account(account, password, email, phone, code, uuid, valid_code, proxies, fid):
    url = "https://m.oklavip29.live/api/accountLogin/register"
    headers = {
        "content-Type": "application/json",
        "user-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1",
        "referer": "https://m.oklavip29.live/registerStep",
        "accept": "application/json, text/plain, */*",
        "accept-Language": "vi-VN,vi;q=0.9",
        "f-id": fid,
        "locale": "vi_vn",
        "token": "",
    }
    
    payload = {
        "account": account,
        "password": password,
        "email": email,
        "phone": phone,
        "region": "+84",
        "registerSource": "H5",
        "inviteCode": "",
        "code": code,
        "uuid": uuid,
        "checked": True,
        "device": "H5",
        "validCode": valid_code
    }
    
    response = requests.post(url, headers=headers, data=json.dumps(payload), proxies=proxies)
    print(response.text)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to register account. Status code: {response.status_code}")
        return None

# Chaycodeso3.com API Integration
API_KEY = "7e791b9ee9cb3624"
BASE_URL = "https://chaycodeso3.com/api"
APP_ID = 2914  # Okvip Others

def check_account_balance():
    """Ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n"""
    url = f"{BASE_URL}?act=account&apik={API_KEY}"
    try:
        response = requests.get(url, timeout=10)
        data = response.json()
        if data.get("ResponseCode") == 0:
            balance = data["Result"]["Balance"]
            print(f"üí∞ S·ªë d∆∞ t√†i kho·∫£n: {balance:,} VND")
            return balance
        else:
            print(f"‚ùå L·ªói ki·ªÉm tra s·ªë d∆∞: {data.get('Msg')}")
            return None
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi API: {e}")
        return None

# Ch·ªçn lo·∫°i s·ªë: ["vina"], ["mobi"], ["viettel"], ["vina", "mobi"], ["vina", "viettel"], ["mobi", "viettel"], ["vina", "mobi", "viettel"]
CHON_LOAI_SO = ["vina", "mobi", "viettel"]  # S·ª≠a t√πy √Ω

def rent_phone_number_custom(loai_list=None):
    """Thu√™ s·ªë ƒëi·ªán tho·∫°i theo lo·∫°i ∆∞u ti√™n trong loai_list."""
    if loai_list is None:
        loai_list = ["mobi"]
    for loai in loai_list:
        carrier_param = {
            "vina": "Vina",
            "mobi": "Mobi",
            "viettel": "Viettel"
        }.get(loai, "Mobi")
        url = f"{BASE_URL}?act=number&apik={API_KEY}&appId={APP_ID}&carrier={carrier_param}"
        try:
            response = requests.get(url, timeout=10)
            data = response.json()
            if data.get("ResponseCode") == 0:
                result = data["Result"]
                phone_id = result["Id"]
                phone_number = result["Number"]
                cost = result["Cost"]
                balance = result["Balance"]
                print(f"‚úÖ Thu√™ s·ªë th√†nh c√¥ng! ({carrier_param})")
                print(f"üì± S·ªë ƒëi·ªán tho·∫°i: {phone_number}")
                print(f"üÜî ID: {phone_id}")
                print(f"üí∞ Ph√≠: {cost} VND")
                print(f"üí≥ S·ªë d∆∞ c√≤n l·∫°i: {balance:,} VND")
                return phone_id, phone_number
            else:
                print(f"‚ùå L·ªói thu√™ s·ªë ({carrier_param}): {data.get('Msg')}")
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi API ({carrier_param}): {e}")
    return None, None

def get_otp_code(phone_id, max_wait_time=20):
    """L·∫•y m√£ OTP v·ªõi timeout 20 gi√¢y"""
    url = f"{BASE_URL}?act=code&apik={API_KEY}&id={phone_id}"
    start_time = time.time()
    
    while time.time() - start_time < max_wait_time:
        try:
            response = requests.get(url, timeout=5)
            data = response.json()
            
            if data.get("ResponseCode") == 0:
                # ƒê√£ nh·∫≠n ƒë∆∞·ª£c code
                result = data["Result"]
                sms_content = result.get("SMS", "")
                otp_code = result.get("Code", "")
                cost = result.get("Cost", 0)
                
                print(f"üîì Nh·∫≠n ƒë∆∞·ª£c OTP!")
                print(f"üì® N·ªôi dung SMS: {sms_content}")
                print(f"üî¢ M√£ OTP: {otp_code}")
                print(f"üí∞ Ph√≠: {cost} VND")
                
                return otp_code
            elif data.get("ResponseCode") == 1:
                # Ch∆∞a nh·∫≠n ƒë∆∞·ª£c code, ti·∫øp t·ª•c ch·ªù
                remaining_time = int(max_wait_time - (time.time() - start_time))
                print(f"‚è≥ ƒêang ch·ªù OTP... C√≤n {remaining_time}s")
                time.sleep(2)
            elif data.get("ResponseCode") == 2:
                # Kh√¥ng nh·∫≠n ƒë∆∞·ª£c code (qu√° th·ªùi gian)
                print("‚è∞ H·∫øt th·ªùi gian ch·ªù OTP")
                break
            else:
                print(f"‚ùå L·ªói l·∫•y OTP: {data.get('Msg')}")
                break
                
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi API: {e}")
            time.sleep(2)
    
    print("‚è∞ H·∫øt th·ªùi gian ch·ªù OTP (20s)")
    return None

def cancel_phone_rental(phone_id):
    """H·ªßy thu√™ s·ªë v√† ho√†n ti·ªÅn"""
    url = f"{BASE_URL}?act=expired&apik={API_KEY}&id={phone_id}"
    try:
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if data.get("ResponseCode") == 0:
            result = data["Result"]
            balance = result["Balance"]
            refund = result["Refund"]
            print(f"‚úÖ H·ªßy thu√™ s·ªë th√†nh c√¥ng!")
            print(f"üí∞ S·ªë ti·ªÅn ho√†n l·∫°i: {refund} VND")
            print(f"üí≥ S·ªë d∆∞ m·ªõi: {balance:,} VND")
        else:
            print(f"‚ùå L·ªói h·ªßy thu√™ s·ªë: {data.get('Msg')}")
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi API: {e}")

def get_fid():
    file_path="fid.txt"
    try:
        lines = open(file_path).readlines()
        if not lines:
            print("üìÇ T·ªáp fid tr·ªëng!")
            return None
        fid = lines[0].strip()
        # X√≥a d√≤ng ƒë·∫ßu v√† th√™m v√†o cu·ªëi
        with open(file_path, 'w') as f: 
            f.writelines(lines[1:])
        return fid
    except FileNotFoundError:
        print("‚ùå Kh√¥ng t√¨m th·∫•y t·ªáp fid.txt! Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n ho·∫∑c t·∫°o t·ªáp n√†y.")
        return None
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc fid: {e}")
        return None

def return_fid_to_end(fid):
    """ƒê∆∞a fid v·ªÅ cu·ªëi file ƒë·ªÉ t√°i s·ª≠ d·ª•ng"""
    if fid:
        try:
            with open("fid.txt", "a") as f:
                f.write(f"{fid}\n")
            print(f"üîÑ ƒê√£ ƒë∆∞a FID v·ªÅ cu·ªëi file ƒë·ªÉ t√°i s·ª≠ d·ª•ng")
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë∆∞a FID v·ªÅ cu·ªëi file: {e}")

def getproxy(file_path='Tainguyen.txt'):
    try:
        lines = open(file_path).readlines()
        if not lines:
            print("üìÇ T·ªáp proxy tr·ªëng!")
            return None
        proxy = lines[0].strip()
        # X√≥a d√≤ng ƒë·∫ßu v√† th√™m v√†o cu·ªëi
        with open(file_path, 'w') as f: 
            f.writelines(lines[1:])
        return proxy
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc proxy: {e}")
        return None

def return_proxy_to_end(proxy):
    """ƒê∆∞a proxy v·ªÅ cu·ªëi file ƒë·ªÉ t√°i s·ª≠ d·ª•ng"""
    if proxy:
        try:
            with open("Tainguyen.txt", "a") as f:
                f.write(f"{proxy}\n")
            print(f"üîÑ ƒê√£ ƒë∆∞a proxy v·ªÅ cu·ªëi file ƒë·ªÉ t√°i s·ª≠ d·ª•ng")
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë∆∞a proxy v·ªÅ cu·ªëi file: {e}")

def random_name():
    return ''.join(random.choices(string.ascii_lowercase, k=random.randint(10, 15)))

def get_device_id():
    """T·∫°o m√£ m√°y duy nh·∫•t, l∆∞u v√†o file ·∫©n, kh√¥ng th·ªÉ thay ƒë·ªïi."""
    device_file = os.path.expanduser("~/.regacc_device_id")
    try:
        if os.path.exists(device_file):
            with open(device_file, "r") as f:
                device_id = f.read().strip()
                if device_id:
                    return device_id
        # T·∫°o m·ªõi d·ª±a tr√™n MAC + user + ·ªï c·ª©ng
        raw = str(uuid.getnode()) + os.environ.get("USERNAME", "") + os.environ.get("COMPUTERNAME", "")
        device_id = hashlib.sha256(raw.encode()).hexdigest()[:16]
        with open(device_file, "w") as f:
            f.write(device_id)
        return device_id
    except Exception as e:
        # N·∫øu l·ªói, fallback d√πng uuid4
        return str(uuid.uuid4())[:16]

def is_device_allowed(device_id):
    """Ki·ªÉm tra m√£ m√°y ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t tr√™n server admin ch∆∞a."""
    try:
        url = "https://raw.githubusercontent.com/Thuanvuse/thuanvuse.github.io/refs/heads/main/checkregacc.json"
        resp = requests.get(url, timeout=10)
        allowed = [item["key"] for item in resp.json()]
        return device_id in allowed
    except Exception as e:
        print("L·ªói ki·ªÉm tra m√£ m√°y:", e)
        return False

# Main registration function
def register_with_auto_phone(token_input):
    """ƒêƒÉng k√Ω t√†i kho·∫£n v·ªõi t·ª± ƒë·ªông thu√™ s·ªë v√† l·∫•y OTP"""
    print("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒëƒÉng k√Ω t·ª± ƒë·ªông...")
    
    # Bi·∫øn to√†n c·ª•c ƒë·∫øm s·ªë acc th√†nh c√¥ng
    global success_count
    global stop_flag
    # (KH√îNG reset success_count ·ªü ƒë√¢y)
    
    # Ki·ªÉm tra s·ªë d∆∞
    balance = check_account_balance()
    if balance is None or balance < 3:  # C·∫ßn √≠t nh·∫•t 3 VND ƒë·ªÉ thu√™ s·ªë
        print("‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ thu√™ s·ªë! Tool s·∫Ω d·ª´ng l·∫°i.")
        stop_flag = True
        return
    
    # L·∫•y th√¥ng tin c·∫ßn thi·∫øt
    fid = get_fid()
    if not fid:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y FID! Tool s·∫Ω d·ª´ng l·∫°i.")
        stop_flag = True
        return  # Kh√¥ng c·∫ßn tr·∫£ l·∫°i FID v√¨ ch∆∞a l·∫•y ƒë∆∞·ª£c
    
    proxy_string = getproxy()
    if not proxy_string:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y proxy! Tool s·∫Ω d·ª´ng l·∫°i.")
        return_fid_to_end(fid)  # Tr·∫£ l·∫°i FID n·∫øu l·∫•y proxy th·∫•t b·∫°i
        stop_flag = True
        return
    
    proxies = create_proxy(proxy_string)
    print(f"üåê S·ª≠ d·ª•ng proxy: {proxy_string}")
    
    # Thu√™ s·ªë ƒëi·ªán tho·∫°i
    phone_id, phone_number = rent_phone_number_custom(CHON_LOAI_SO)
    if not phone_id or not phone_number:
        print("‚ùå Kh√¥ng th·ªÉ thu√™ s·ªë ƒëi·ªán tho·∫°i!")
        return_proxy_to_end(proxy_string)
        return_fid_to_end(fid)
        return
    
    # G·ª≠i y√™u c·∫ßu OTP
    print(f"üì§ G·ª≠i y√™u c·∫ßu OTP ƒë·∫øn s·ªë {phone_number}...")
    response = send_register_phone(phone_number, proxies, fid)
    
    if not response or response.get('code') != 200:
        print(f"‚ùå L·ªói g·ª≠i OTP: {response.get('message') if response else 'Kh√¥ng c√≥ ph·∫£n h·ªìi'}")
        cancel_phone_rental(phone_id)
        return_proxy_to_end(proxy_string)
        return_fid_to_end(fid)
        return
    
    print("‚úÖ G·ª≠i y√™u c·∫ßu OTP th√†nh c√¥ng!")
    
    # Ch·ªù v√† l·∫•y OTP
    otp_code = get_otp_code(phone_id, max_wait_time=20)
    
    if not otp_code:
        print("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c OTP trong th·ªùi gian quy ƒë·ªãnh!")
        cancel_phone_rental(phone_id)
        return_proxy_to_end(proxy_string)
        return_fid_to_end(fid)
        return
    
    # ƒêƒÉng k√Ω t√†i kho·∫£n v·ªõi 3 l·∫ßn th·ª≠
    print("üìù B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω t√†i kho·∫£n...")
    
    # T·∫°o th√¥ng tin t√†i kho·∫£n
    account_name = random_name()
    password = hashlib.md5("thuanne123jqk!".encode()).hexdigest()
    email = f"{account_name}@gmail.com"
    
    print(f"üë§ T√™n t√†i kho·∫£n: {account_name}")
    print(f"üìß Email: {email}")
    
    registration_success = False
    
    for attempt in range(1, 4):  # Th·ª≠ 3 l·∫ßn
        print(f"\nüîÑ L·∫ßn th·ª≠ {attempt}/3:")
        
        try:
            # L·∫•y captcha m·ªõi cho m·ªói l·∫ßn th·ª≠
            print("üß† ƒêang l·∫•y captcha m·ªõi...")
            captcha_uuid, captcha_code = get_captcha(proxies)
            if not captcha_uuid or not captcha_code:
                print(f"‚ùå L·∫ßn {attempt}: Kh√¥ng th·ªÉ l·∫•y captcha!")
                if attempt < 3:
                    print("‚è≥ Ch·ªù 3 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...")
                    time.sleep(3)
                continue
            
            # ƒêƒÉng k√Ω
            result = buregister_account(
                account_name, password, email, phone_number,
                captcha_code, captcha_uuid, otp_code, proxies, fid
            )
            
            if result and result.get('code') == 200:
                token = result['data']['token']
                print(f"‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng ·ªü l·∫ßn th·ª≠ {attempt}!")
                print(f"üé´ Token: {token}")
                
                # L∆∞u th√¥ng tin t√†i kho·∫£n
                account_info = f"{token}|{proxy_string}|{account_name}|thuanne123jqk!|{token_input}\n"
                with open("ACCne.txt", "a", encoding="utf-8") as f:
                    f.write(account_info)
                print(f"üíæ ƒê√£ l∆∞u th√¥ng tin t√†i kho·∫£n v√†o ACCne.txt")
                
                # KH√îNG g·ªçi return_proxy_to_end(proxy_string) v√† return_fid_to_end(fid) khi th√†nh c√¥ng!
                registration_success = True
                # TƒÉng bi·∫øn ƒë·∫øm acc th√†nh c√¥ng
                success_count += 1
                print(f"üìä T·ªïng s·ªë acc ƒë√£ t·∫°o th√†nh c√¥ng: {success_count}")
                break
                
            else:
                error_msg = result.get('message') if result else 'Kh√¥ng c√≥ ph·∫£n h·ªìi'
                print(f"‚ùå L·∫ßn {attempt}: ƒêƒÉng k√Ω th·∫•t b·∫°i - {error_msg}")
                
                # N·∫øu b·ªã h·∫°n ch·∫ø th√¨ x√≥a FID, kh√¥ng l∆∞u l·∫°i
                if error_msg and ("h·∫°n ch·∫ø" in error_msg.lower() or "limit" in error_msg.lower()):
                    print(f"‚ö†Ô∏è FID b·ªã h·∫°n ch·∫ø, s·∫Ω x√≥a lu√¥n: {fid}")
                    # Kh√¥ng g·ªçi return_fid_to_end(fid) n·ªØa
                    return_proxy_to_end(proxy_string)
                    cancel_phone_rental(phone_id)
                    return
                
                if attempt < 3:
                    print("‚è≥ Ch·ªù 3 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...")
                    time.sleep(3)
                    
        except Exception as e:
            print(f"‚ùå L·∫ßn {attempt}: L·ªói trong qu√° tr√¨nh ƒëƒÉng k√Ω: {e}")
            if attempt < 3:
                print("‚è≥ Ch·ªù 3 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...")
                time.sleep(3)
    
    if not registration_success:
        print(f"\n‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠!")
        # N·∫øu t·∫•t c·∫£ 3 l·∫ßn th·ª≠ ƒë·ªÅu th·∫•t b·∫°i, v·∫´n tr·∫£ v·ªÅ proxy v√† fid ƒë·ªÉ t√°i s·ª≠ d·ª•ng
        return_proxy_to_end(proxy_string)
        return_fid_to_end(fid)
    
    # H·ªßy thu√™ s·ªë n·∫øu ch∆∞a t·ª± ƒë·ªông h·∫øt h·∫°n
    cancel_phone_rental(phone_id)

if __name__ == "__main__":
    # --- Ki·ªÉm tra m√£ m√°y tr∆∞·ªõc khi cho ch·∫°y tool ---
    device_id = get_device_id()
    if not is_device_allowed(device_id):
        print("\nM√£ m√°y c·ªßa b·∫°n l√†:")
        print(f"\n=== {device_id} ===\n")
        print("\033[91mM√£ m√°y n√†y ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t!\033[0m")
        print("\nVui l√≤ng li√™n h·ªá admin ƒë·ªÉ k√≠ch ho·∫°t m√£ m√°y n√†y:")
        print("Telegram: https://t.me/t29032006 ho·∫∑c g·ª≠i m√£ n√†y cho admin!")
        input("\nNh·∫•n Enter ƒë·ªÉ tho√°t...")
        exit(0)
    # --- H·∫øt ph·∫ßn ki·ªÉm tra m√£ m√°y ---

    import sys
    try:
        max_acc = int(input("Nh·∫≠p s·ªë nick mu·ªën t·∫°o: ").strip())
    except Exception:
        print("Gi√° tr·ªã nh·∫≠p kh√¥ng h·ª£p l·ªá! M·∫∑c ƒë·ªãnh t·∫°o 10 nick.")
        max_acc = 10
    try:
        max_threads = int(input("Nh·∫≠p s·ªë lu·ªìng t·ªëi ƒëa (m·∫∑c ƒë·ªãnh 1): ").strip())
        if max_threads < 1:
            max_threads = 1
    except Exception:
        max_threads = 1

    # --- Th√™m ch·ª©c nƒÉng ch·ªçn lo·∫°i s·ªë ƒëi·ªán tho·∫°i ---
    print("\nCh·ªçn lo·∫°i s·ªë ƒëi·ªán tho·∫°i mu·ªën ∆∞u ti√™n khi t·∫°o nick:")
    print("1. Ch·ªâ Vina")
    print("2. Ch·ªâ Mobi")
    print("3. Ch·ªâ Viettel")
    print("4. Vina + Mobi")
    print("5. Vina + Viettel")
    print("6. Mobi + Viettel")
    print("7. C·∫£ 3 lo·∫°i (Vina + Mobi + Viettel)")
    chon = input("Nh·∫≠p l·ª±a ch·ªçn (1-7, m·∫∑c ƒë·ªãnh 7): ").strip()
    if chon == "1":
        CHON_LOAI_SO = ["vina"]
    elif chon == "2":
        CHON_LOAI_SO = ["mobi"]
    elif chon == "3":
        CHON_LOAI_SO = ["viettel"]
    elif chon == "4":
        CHON_LOAI_SO = ["vina", "mobi"]
    elif chon == "5":
        CHON_LOAI_SO = ["vina", "viettel"]
    elif chon == "6":
        CHON_LOAI_SO = ["mobi", "viettel"]
    else:
        CHON_LOAI_SO = ["vina", "mobi", "viettel"]
    print(f"S·∫Ω ∆∞u ti√™n thu√™ s·ªë theo th·ª© t·ª±: {CHON_LOAI_SO}\n")
    # --- H·∫øt ph·∫ßn ch·ªçn lo·∫°i s·ªë ---

    # --- Th√™m ch·ª©c nƒÉng l∆∞u v√† ƒë·ªçc token t·ª´ settings.json ---
    SETTINGS_FILE = "settings.json"
    def load_settings():
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}
    def save_settings(settings):
        with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
    settings = load_settings()
    token_input = settings.get("token", "")
    if token_input:
        print(f"ƒê√£ t√¨m th·∫•y token trong c√†i ƒë·∫∑t: {token_input}")
        change = input("B·∫°n c√≥ mu·ªën nh·∫≠p l·∫°i token? (y/n): ").strip().lower()
        if change == "y":
            token_input = input("Nh·∫≠p token (chaycodeso3.com): ").strip()
            settings["token"] = token_input
            save_settings(settings)
    else:
        token_input = input("Nh·∫≠p token (chaycodeso3.com): ").strip()
        settings["token"] = token_input
        save_settings(settings)
    # --- H·∫øt ph·∫ßn l∆∞u/ƒë·ªçc token ---

    from threading import Thread, Lock
    import time
    
    success_count = 0
    success_lock = Lock()
    stop_flag = False
    
    def register_with_auto_phone_wrapper():
        global success_count, stop_flag
        while True:
            if stop_flag:
                break
            result = register_with_auto_phone(token_input)
            with success_lock:
                if success_count >= max_acc:
                    stop_flag = True
                    break
            time.sleep(2)
    
    threads = []
    for _ in range(max_threads):
        t = Thread(target=register_with_auto_phone_wrapper)
        t.start()
        threads.append(t)
    
    for t in threads:
        t.join()
    print(f"\n‚úÖ ƒê√£ t·∫°o ƒë·ªß {success_count}/{max_acc} nick!")
input("enter ƒë·ªÉ tho√°t!!!!")
